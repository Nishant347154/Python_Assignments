1. Why are functions advantageous to have in your programs?
---> In Python, functions are advantageous in programs because they:
Modularize Code: Breaking down tasks into smaller, reusable functions improves code organization and readability.
Encapsulate Logic: Functions encapsulate specific tasks, hiding implementation details and promoting a cleaner codebase.
Enable Reusability: Once defined, functions can be easily reused throughout the program, reducing redundancy and promoting consistency.
Simplify Testing: Functions facilitate isolated testing of specific functionalities, leading to more effective debugging and maintenance.
Enhance Scalability: By decomposing complex tasks, functions make it easier to scale and extend the program as requirements evolve.
Overall, functions in Python contribute to code clarity, maintainability, and flexibility, making development more efficient and robust.



2. When does the code in a function run: when it's specified or when it's called?
---> In Python, the code in a function runs when the function is called, not when it's specified.
When you define a function in Python, you're essentially creating a blueprint for an action that can be executed later. The code inside the function is not executed at the point of definition; it's only executed when the function is called elsewhere in the program.
For example:
ef my_function():
    print("This is inside the function.")    
print("This is outside the function.")
my_function()  # Function call



3. What statement creates a function?
---> def statement is used to create a function.



4. What is the difference between a function and a function call?
---> A function is a block of reusable code that performs a specific task.
     A function call is the act of executing a function to perform its task.



5. How many global scopes are there in a Python program? How many local scopes?
---> There is one global scope per program. Local scopes, however, can be created whenever a function is called.
 Each function call creates its own local scope. Therefore, the number of local scopes can vary depending on how
 many times functions are called during program execution.



6. What happens to variables in a local scope when the function call returns?
---> When a function call returns in Python, the local scope associated with that function is destroyed.
 Any variables defined within the local scope cease to exist, and their values are no longer accessible. 
 This process is known as garbage collection, where the memory allocated to the local variables is reclaimed 
 by the Python interpreter for future use.



7. What is the concept of a return value? Is it possible to have a return value in an expression?
---> A return value is the value a function provides back to the caller after completing its execution.
 Yes, it's possible to have a return value in an expression, where the return value of a function is used directly
 within a larger expression.



8. If a function does not have a return statement, what is the return value of a call to that function?
---> If a function does not have a return statement, or if it reaches the end of its code without encountering a
 return statement, the return value of a call to that function is None. In Python, None is a special value that
 represents the absence of a value or the lack of any meaningful result. Therefore, if a function lacks a return 
 statement, it implicitly returns None.



9. How do you make a function variable refer to the global variable?
---> ou can use the global keyword followed by the variable name inside the function to indicate that the variable 
should refer to the global variable with the same name.



10. What is the data type of None?
---> The data type of None in Python is NoneType. 



11. What does the sentence import areallyourpetsnamederic do?
---> The sentence "import areallyourpetsnamederic" does not have any predefined meaning in Python.
 However, if you were to write a Python module named areallyourpetsnamederic.py and import it using import
 areallyourpetsnamederic, Python would attempt to import the module named areallyourpetsnamederic. If such a module 
exists, its code would be executed, and its contents would become available for use in the current Python script 
or environment. Otherwise, if the module does not exist, Python would raise an ImportError.



12. If you had a bacon() feature in a spam module, what would you call it after importing spam?
---> After importing the spam module, you would call the bacon() function using the dot notation like this:
 spam.bacon()

13. What can you do to save a programme from crashing if it encounters an error?
---> To prevent a program from crashing when it encounters an error, you can use error handling techniques like 
 try-except blocks. In short, surround the code that might raise an error with a try-except block, 
 and provide alternative actions or error messages to handle the exception gracefully.



14. What is the purpose of the try clause? What is the purpose of the except clause?
---> The purpose of the try clause is to enclose code that might raise an exception.
 The purpose of the except clause is to handle exceptions raised within the try block.